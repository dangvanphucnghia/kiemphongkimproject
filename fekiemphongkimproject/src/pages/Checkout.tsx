import React, { useMemo, useState } from "react";
import { Link, useNavigate } from "react-router-dom";

type Item = { id: string; name: string; image?: string; price: number; qty: number };

const GOLD_1 = "#D4AF37";
const GOLD_2 = "#E5CC7A";
const PLATINUM = "#E5E4E2";

const initItems: Item[] = [
  { id: "1", name: "S·∫£n ph·∫©m v√†ng b·∫°ch kim A", price: 259000, qty: 1 },
  { id: "2", name: "S·∫£n ph·∫©m v√†ng b·∫°ch kim B", price: 389000, qty: 2 },
];

export default function Checkout() {
  const navigate = useNavigate();
  const [items, setItems] = useState<Item[]>(initItems);

  const subtotal = useMemo(() => items.reduce((s, i) => s + i.price * i.qty, 0), [items]);

  const setQty = (id: string, change: number | "set", value?: number) => {
    setItems(prev =>
      prev.map(it =>
        it.id === id
          ? { ...it, qty: Math.max(1, change === "set" ? (value ?? it.qty) : it.qty + change) }
          : it
      )
    );
  };
  const remove = (id: string) => setItems(prev => prev.filter(i => i.id !== id));
  const fmt = (v: number) => v.toLocaleString("vi-VN") + "‚Ç´";

  return (
    <div className="min-h-screen relative">
      {/* n·ªÅn nh·∫π nh√†ng */}
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-white via-[#fafafa] to-white" />

      <header className="sticky top-0 z-40 backdrop-blur bg-white/70 border-b">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center gap-3">
          <button
            onClick={() => navigate(-1)}
            className="rounded-xl px-3 py-2 border hover:bg-zinc-50"
            aria-label="Quay l·∫°i"
          >
            ‚Üê
          </button>
          <h1 className="text-lg font-semibold">Ch·ªët ƒë∆°n</h1>
          <div className="ml-auto text-sm">
            <Link to="/" className="text-zinc-600 hover:underline">Trang ch·ªß</Link>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Danh s√°ch SP */}
        <section
          className="lg:col-span-2 rounded-3xl border border-white/30 bg-white/50 backdrop-blur-xl p-4"
          style={{ boxShadow: "0 10px 40px -15px rgba(0,0,0,.15)" }}
        >
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-base font-semibold">S·∫£n ph·∫©m ƒë√£ ch·ªçn</h2>
            <span className="text-sm text-zinc-500">{items.length} s·∫£n ph·∫©m</span>
          </div>

          {items.length === 0 ? (
            <div className="text-center text-zinc-600 py-10">
              <div
                className="mx-auto w-16 h-16 rounded-2xl ring-1 ring-zinc-200 flex items-center justify-center bg-white/60"
              >
                üõí
              </div>
              <p className="mt-3">Ch∆∞a c√≥ s·∫£n ph·∫©m.</p>
              <Link to="/" className="text-sm text-blue-600 hover:underline">Ti·∫øp t·ª•c mua s·∫Øm</Link>
            </div>
          ) : (
            <ul className="divide-y">
              {items.map(it => (
                <li key={it.id} className="py-4 flex gap-3">
                  {/* ·∫¢nh placeholder */}
                  {it.image ? (
                    <img src={it.image} alt={it.name} className="w-20 h-20 rounded-xl object-cover ring-1 ring-zinc-200" />
                  ) : (
                    <div
                      className="w-20 h-20 rounded-xl ring-1 ring-zinc-200"
                      style={{ backgroundImage: `linear-gradient(135deg, ${PLATINUM}, #fff)` }}
                      aria-hidden="true"
                    />
                  )}

                  <div className="flex-1 min-w-0">
                    <div className="flex items-start gap-2">
                      <div className="font-medium leading-5 line-clamp-2">{it.name}</div>
                      <button className="ml-auto text-sm text-zinc-500 hover:text-red-600 hover:underline" onClick={() => remove(it.id)}>Xo√°</button>
                    </div>
                    <div className="text-sm text-zinc-600 mt-0.5">{fmt(it.price)}</div>

                    <div className="mt-3 flex items-center gap-2">
                      <Step onClick={() => setQty(it.id, -1)} aria="Gi·∫£m s·ªë l∆∞·ª£ng">‚àí</Step>
                      <input
                        className="w-12 h-9 text-center border border-zinc-200 rounded-lg"
                        value={it.qty}
                        onChange={e => {
                          const v = parseInt(e.target.value || "1", 10);
                          if (!Number.isNaN(v)) setQty(it.id, "set", v);
                        }}
                        inputMode="numeric"
                        aria-label={`S·ªë l∆∞·ª£ng ${it.name}`}
                      />
                      <Step onClick={() => setQty(it.id, +1)} aria="TƒÉng s·ªë l∆∞·ª£ng">+</Step>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </section>

        {/* T√≥m t·∫Øt + Li√™n h·ªá */}
        <aside
          className="rounded-3xl border border-white/30 bg-white/60 backdrop-blur-xl p-4 space-y-4"
          style={{ boxShadow: "0 10px 40px -15px rgba(0,0,0,.15)" }}
        >
          <h2 className="text-base font-semibold">T√≥m t·∫Øt ƒë∆°n</h2>
          <div className="space-y-2 text-sm">
            <Row label="T·∫°m t√≠nh" value={fmt(subtotal)} />
            <Row label="Ph√≠ v·∫≠n chuy·ªÉn" value="‚Äî" />
            <Row label="Gi·∫£m gi√°" value="‚Äî" />
            <div className="h-px bg-zinc-200 my-2" />
            <Row big label="T·ªïng thanh to√°n" value={fmt(subtotal)} />
          </div>

          {/* N√∫t li√™n h·ªá */}
          <div className="grid gap-2">
            <a
              href="https://facebook.com/" target="_blank" rel="noopener noreferrer"
              className="h-11 rounded-xl px-4 inline-flex items-center justify-center gap-2 text-white font-medium"
              style={{ backgroundImage: "linear-gradient(135deg, #1877F2, #3b82f6)" }}
            >
              Li√™n h·ªá Facebook
            </a>
            <a
              href="https://zalo.me/" target="_blank" rel="noopener noreferrer"
              className="h-11 rounded-xl px-4 inline-flex items-center justify-center gap-2 text-white font-medium"
              style={{ backgroundImage: "linear-gradient(135deg, #0068FF, #60a5fa)" }}
            >
              Li√™n h·ªá Zalo
            </a>
          </div>

          {/* CTA ƒë·∫∑t h√†ng ‚Äì nh√¢n vi√™n s·∫Ω li√™n h·ªá */}
          <button
            className="w-full h-12 rounded-xl text-white font-semibold shadow-lg shadow-amber-200/40"
            style={{ backgroundImage: `linear-gradient(135deg, ${GOLD_1}, ${GOLD_2})` }}
            onClick={() => alert("ƒê√£ ghi nh·∫≠n y√™u c·∫ßu. Nh√¢n vi√™n s·∫Ω li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n!")}
          >
            ƒê·∫∑t h√†ng ‚Äì Nh√¢n vi√™n li√™n h·ªá
          </button>

          {/* (Tu·ª≥ ch·ªçn) Ghi ch√∫/ƒë·ªãa ch·ªâ ƒë∆°n gi·∫£n ‚Äì UI only */}
          <div className="pt-2">
            <label className="block text-sm text-zinc-600 mb-1">Ghi ch√∫ cho ƒë∆°n h√†ng</label>
            <textarea className="w-full rounded-xl border border-zinc-200 p-3" rows={3} placeholder="V√≠ d·ª•: G·ªçi tr∆∞·ªõc khi giao h√†ng, giao gi·ªù h√†nh ch√≠nh‚Ä¶" />
          </div>
        </aside>
      </main>
    </div>
  );
}

function Step({ children, onClick, aria }: { children: React.ReactNode; onClick: () => void; aria: string }) {
  return (
    <button
      onClick={onClick}
      aria-label={aria}
      className="h-9 w-9 rounded-lg border border-zinc-200 hover:bg-zinc-50 active:scale-[0.98] transition"
    >
      {children}
    </button>
  );
}

function Row({ label, value, big }: { label: string; value: React.ReactNode; big?: boolean }) {
  return (
    <div className="flex items-center justify-between">
      <span className={`text-zinc-600 ${big ? "text-base" : ""}`}>{label}</span>
      <span className={`font-semibold ${big ? "text-lg" : ""}`}>{value}</span>
    </div>
  );
}
